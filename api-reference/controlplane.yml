components:
  schemas:
    ACL:
      type: object
      description: ACL
      allOf:
      - $ref: '#/components/schemas/StandardFieldsDynamoDb'
      - properties:
          id:
            type: string
            description: ACL id
          resource_id:
            type: string
            description: Resource ID
          resource_type:
            type: string
            description: Resource type
          role:
            type: string
            description: Role
          subject_id:
            type: string
            description: Subject ID
          subject_type:
            type: string
            description: Subject type
          workspace:
            type: string
            description: Workspace name
    Agent:
      type: object
      description: Agent parent of AgentDeployment
      allOf:
      - $ref: '#/components/schemas/StandardFieldsDynamoDb'
      - properties:
          display_name:
            type: string
            description: Agent display name
          labels:
            $ref: '#/components/schemas/Labels'
          name:
            type: string
            description: Agent name
          workspace:
            type: string
            description: Workspace name
    AgentConfiguration:
      type: object
      description: Agent configuration, this is a key value storage. In your agent
        you can retrieve the value with config[key]
      properties:
        secret:
          type: boolean
          description: Agent configuration secret
        value:
          type: string
          description: Agent configuration value
    AgentDeployment:
      type: object
      description: Agent deployment configuration
      allOf:
      - $ref: '#/components/schemas/StandardFieldsDynamoDb'
      - properties:
          agent:
            type: string
            description: The name of the agent
          configuration:
            type: object
            $ref: '#/components/schemas/DeploymentConfigurations'
            description: Agent configuration, this is a key value storage. In your
              agent you can retrieve the value with config[key]
          enabled:
            type: boolean
            description: Whether the agent deployment is enabled
          environment:
            type: string
            description: The name of the environment
          flavors:
            $ref: '#/components/schemas/Flavors'
          labels:
            $ref: '#/components/schemas/Labels'
          llm:
            type: string
            description: LLM to use for agent, it should be compatible with function
              calling
          pod_template:
            type: object
            description: The pod template, should be a valid Kubernetes pod template
          policies:
            $ref: '#/components/schemas/DeploymentPolicies'
          runtime:
            $ref: '#/components/schemas/Runtime'
          serverless_config:
            $ref: '#/components/schemas/DeploymentServerlessConfig'
          store_id:
            type: string
            description: Create from a store registered function
          workspace:
            type: string
            description: The workspace the agent deployment belongs to
    AgentRelease:
      type: object
      description: Agent release, used to deploy a agent from one environment to another
      properties:
        from:
          type: string
          description: Origin environment from which the agent is released
        to:
          type: string
          description: Destination environment to which the agent is released
    ApiKey:
      type: object
      description: Long-lived API key for accessing Beamlit
      allOf:
      - $ref: '#/components/schemas/StandardFieldsDynamoDb'
      - properties:
          api_key:
            type: string
            description: Api key
          expires_in:
            type: string
            description: Duration until expiration (in seconds)
          id:
            type: string
            description: Api key id, to retrieve it from the API
          name:
            type: string
            description: Name for the API key
          sub:
            type: string
            description: User subject identifier
          sub_type:
            type: string
            description: Subject type
    ArrayMetric:
      type: array
      description: Array of metrics
      items:
        $ref: '#/components/schemas/Metric'
    AuthenticationProviderModel:
      type: object
      description: Model obtained from an external authentication provider, such as
        HuggingFace, OpenAI, etc...
      properties:
        created_at:
          type: string
          description: Provider model created at
        downloads:
          type: integer
          description: Provider model downloads
        id:
          type: string
          description: Provider model ID
        library_name:
          type: string
          description: Provider model library name
        likes:
          type: integer
          description: Provider model likes
        name:
          type: string
          description: Provider model name
        pipeline_tag:
          type: string
          description: Provider model pipeline tag
        private:
          type: boolean
          description: Provider model private
        tags:
          type: array
          description: Provider model tags
          items:
            type: string
        trending_score:
          type: integer
          description: Provider model trending score
    AuthenticationProviderOrganization:
      type: object
      description: Organization that hosts models from an external authentication
        provider (HuggingFace, OpenAI, etc...)
      properties:
        avatar_url:
          type: string
          description: Provider organization avatar URL
        display_name:
          type: string
          description: Provider organization display name
        id:
          type: string
          description: Provider organization ID
        name:
          type: string
          description: Provider organization name
    Configuration:
      type: object
      description: Configuration
      properties:
        continents:
          type: array
          description: Continents
          items: {}
        countries:
          type: array
          description: Countries
          items: {}
    Continent:
      type: object
      description: Continent
      properties:
        display_name:
          type: string
          description: Continent display name
        name:
          type: string
          description: Continent code
    Country:
      type: object
      description: Configuration
      properties:
        display_name:
          type: string
          description: Country display name
        name:
          type: string
          description: Country code
    DeploymentConfiguration:
      type: object
      description: Function configuration, this is a key value storage. In your function
        you can retrieve the value with config[key]
      properties:
        secret:
          type: boolean
          description: Function configuration secret
        value:
          type: string
          description: Function configuration value
    DeploymentConfigurations:
      type: object
      description: Deployment configurations key value and also a boolean secret to
        specify if it should be stored in secret manager
      additionalProperties:
        type: string
    DeploymentPolicies:
      type: array
      items:
        type: string
        description: Policy name
    DeploymentServerlessConfig:
      type: object
      description: Configuration for a serverless deployment
      properties:
        last_pod_retention_period:
          type: string
          description: The minimum amount of time that the last replica will remain
            active AFTER a scale-to-zero decision is made
        max_num_replicas:
          type: integer
          description: The maximum number of replicas for the deployment.
        metric:
          type: string
          description: Metric watched to make scaling decisions. Can be "cpu" or "memory"
            or "rps" or "concurrency"
        min_num_replicas:
          type: integer
          description: The minimum number of replicas for the deployment. Can be 0
            or 1 (in which case the deployment is always running in at least one location).
        scale_down_delay:
          type: string
          description: The time window which must pass at reduced concurrency before
            a scale-down decision is applied. This can be useful, for example, to
            keep containers around for a configurable duration to avoid a cold start
            penalty if new requests come in.
        scale_up_minimum:
          type: integer
          description: The minimum number of replicas that will be created when the
            deployment scales up from zero.
        stable_window:
          type: string
          description: The sliding time window over which metrics are averaged to
            provide the input for scaling decisions
        target:
          type: string
          description: Target value for the watched metric
    Environment:
      type: object
      description: Environment on which deployments will be made (e.g. development,
        production), enforcing multiple policies at once.
      allOf:
      - $ref: '#/components/schemas/StandardFieldsDynamoDb'
      - properties:
          display_name:
            type: string
            description: The display name of the environment
          labels:
            $ref: '#/components/schemas/Labels'
          name:
            type: string
            description: The name of the environment
          policies:
            type: array
            description: The policies attached to the environment
            items: {}
          workspace:
            type: string
            description: The workspace the environment belongs to
    EnvironmentMetrics:
      type: object
      description: Metrics for the environment
      properties:
        inference_per_second_global:
          $ref: '#/components/schemas/ArrayMetric'
          description: Inference metrics for the environment globally
    Flavor:
      type: object
      description: A type of hardware available for deployments
      properties:
        name:
          type: string
          description: Flavor name (e.g. t4)
        type:
          type: string
          description: Flavor type (e.g. cpu, gpu)
    Flavors:
      type: array
      description: Types of hardware available for deployments
      items:
        $ref: '#/components/schemas/Flavor'
    Function:
      type: object
      description: Function parent of FunctionDeployment
      allOf:
      - $ref: '#/components/schemas/StandardFieldsDynamoDb'
      - properties:
          display_name:
            type: string
            description: Function display name
          labels:
            $ref: '#/components/schemas/Labels'
          name:
            type: string
            description: Function name
          workspace:
            type: string
            description: Workspace name
    FunctionConfiguration:
      description: Function configuration, this is a key value storage. In your function
        you can retrieve the value with config[key]
      properties:
        secret:
          description: Function configuration secret
          type: boolean
        value:
          description: Function configuration value
          type: string
      type: object
    FunctionDeployment:
      type: object
      description: Function deployment configuration
      allOf:
      - $ref: '#/components/schemas/StandardFieldsDynamoDb'
      - properties:
          configuration:
            type: object
            $ref: '#/components/schemas/DeploymentConfigurations'
            description: Function configuration, this is a key value storage. In your
              function you can retrieve the value with config[key]
          description:
            type: string
            description: Function description, very important for the agent function
              to work with an LLM
          enabled:
            type: boolean
            description: Whether the function deployment is enabled
          environment:
            type: string
            description: The name of the environment
          flavors:
            $ref: '#/components/schemas/Flavors'
          function:
            type: string
            description: The name of the function
          labels:
            $ref: '#/components/schemas/Labels'
          parameters:
            type: array
            description: Function parameters, for your function to be callable with
              Agent
            items:
              $ref: '#/components/schemas/StoreFunctionParameter'
          pod_template:
            type: object
            description: The pod template, should be a valid Kubernetes pod template
          policies:
            $ref: '#/components/schemas/DeploymentPolicies'
          runtime:
            $ref: '#/components/schemas/Runtime'
          serverless_config:
            $ref: '#/components/schemas/DeploymentServerlessConfig'
          store_id:
            type: string
            description: Create from a store registered function
          workspace:
            type: string
            description: The workspace the function deployment belongs to
    FunctionPolicies:
      description: Policies to apply to the model deployment
      items:
        description: Policy name
        type: string
      type: array
    FunctionProviderRef:
      description: Reference to a model provider
      properties:
        kind:
          description: The kind of the model provider, can be Provider
          type: string
        name:
          description: The name of the model provider
          type: string
      type: object
    FunctionRelease:
      type: object
      description: Function release, used to deploy a function from one environment
        to another
      properties:
        from:
          type: string
          description: Origin environment from which the function is released
        to:
          type: string
          description: Destination environment to which the function is released
    Labels:
      type: object
      description: Labels
      additionalProperties:
        type: string
    Location:
      description: Location availability for policies
      properties:
        continent:
          description: Location continent
          type: string
        country:
          description: Location country
          type: string
        flavors:
          description: Location flavors
          items:
            $ref: '#/components/schemas/Flavor'
          type: array
        location:
          description: Location name
          type: string
        name:
          description: Location name
          type: string
        status:
          description: Location status
          type: string
      type: object
    LocationResponse:
      type: object
      description: Location availability for policies
      properties:
        continent:
          type: string
          description: Continent of the location
        country:
          type: string
          description: Country of the location
        flavors:
          type: array
          description: Hardware flavors available in the location
          items:
            $ref: '#/components/schemas/Flavor'
        location:
          type: string
          description: Name of the location
        status:
          type: string
          description: Status of the location
    Metric:
      type: object
      description: Metric
      properties:
        timestamp:
          type: string
          description: Metric timestamp
        value:
          type: string
          description: Metric value
    Metrics:
      type: object
      description: Metrics for resources
      properties:
        models:
          description: Metrics for models
    Model:
      type: object
      description: Logical object representing a model, that can be instantiated in
        multiple environments as model deployments
      allOf:
      - $ref: '#/components/schemas/StandardFieldsDynamoDb'
      - properties:
          display_name:
            type: string
            description: Model display name
          labels:
            $ref: '#/components/schemas/Labels'
          name:
            type: string
            description: Model name
          workspace:
            type: string
            description: The workspace the model belongs to
    ModelDeployment:
      type: object
      description: An instance of a model, deployed in a specific environment
      allOf:
      - $ref: '#/components/schemas/StandardFieldsDynamoDb'
      - properties:
          enabled:
            type: boolean
            description: If false, the model deployment will not be active nor serve
              requests
          environment:
            type: string
            description: The name of the environment in which the model deployment
              is deployed
          flavors:
            $ref: '#/components/schemas/Flavors'
            description: The hardware flavor(s) on which this model deployment can
              run. This should be a subset of the flavors allowed by the environment
              policies, and should not mix GPU and non-GPU flavors.
          labels:
            $ref: '#/components/schemas/Labels'
          metric_port:
            type: integer
            description: The port to serve the metrics on
          model:
            type: string
            description: The name of the parent model
          model_provider_ref:
            $ref: '#/components/schemas/ModelProviderRef'
            description: The reference for the origin of the model
          pod_template:
            type: object
            description: The pod template for the deployment. Should be a Kubernetes
              PodTemplateSpec
          policies:
            $ref: '#/components/schemas/DeploymentPolicies'
            description: The policies that are attached to the model deployment directly
          runtime:
            $ref: '#/components/schemas/Runtime'
            description: Configurations that describe which model is being served
              and how it is served
          serverless_config:
            $ref: '#/components/schemas/DeploymentServerlessConfig'
            description: The configuration for scaling the model deployment
          serving_port:
            type: integer
            description: The port to serve the model on
          workspace:
            type: string
            description: The workspace the model deployment belongs to
    ModelDeploymentLog:
      description: Log for a model deployment
      properties:
        message:
          description: Content of the log
          type: string
        timestamp:
          description: The timestamp of the log
          type: string
      type: object
    ModelDeploymentMetrics:
      description: Metrics for a single model deployment
      properties:
        inference_per_second_global:
          $ref: '#/components/schemas/ArrayMetric'
          description: Historical requests per second (RPS), for the model deployment
            globally
        inference_per_second_per_region:
          description: Historical requests per second (RPS) per location, for the
            model deployment
          properties:
            region:
              $ref: '#/components/schemas/ArrayMetric'
          type: object
        query_per_second_global:
          description: RPS value (in last 24 hours) for the model deployment globally
          type: number
        query_per_second_per_code_global:
          $ref: '#/components/schemas/QPS'
          description: RPS value (in last 24 hours) per response status code, for
            the model deployment globally
        query_per_second_per_region:
          $ref: '#/components/schemas/QPS'
          description: RPS value (in last 24 hours) per location, for the model deployment
        query_per_second_per_region_per_code:
          description: RPS value (in last 24 hours) per response status code per location,
            for the model deployment
          properties:
            region:
              $ref: '#/components/schemas/QPS'
          type: object
      type: object
    ModelDeployments:
      type: array
      items:
        $ref: '#/components/schemas/ModelDeployment'
        description: Model deployments
    ModelMetrics:
      description: Metrics for a single model
      properties:
        inference_per_second_global:
          $ref: '#/components/schemas/ArrayMetric'
          description: Historical requests per second (RPS), for the model globally
        query_per_second_per_region:
          $ref: '#/components/schemas/QPS'
          description: RPS value (in last 24 hours) per location, for the model
      type: object
    ModelPolicies:
      description: Policies to apply to the model deployment
      items:
        description: Policy name
        type: string
      type: array
    ModelProvider:
      type: object
      description: Model provider
      allOf:
      - $ref: '#/components/schemas/StandardFieldsDynamoDb'
      - properties:
          comment:
            type: string
            description: Model provider description
          config:
            $ref: '#/components/schemas/ProviderConfig'
            description: Additional configuration for the model provider
          labels:
            $ref: '#/components/schemas/Labels'
          name:
            type: string
            description: Model provider name
          type:
            type: string
            description: Model provider type
          workspace:
            type: string
            description: Workspace name
    ModelProviderRef:
      type: object
      description: Reference to a model provider
      properties:
        kind:
          type: string
          description: The kind of the model provider, can be Provider
        name:
          type: string
          description: The name of the model provider
    ModelRelease:
      type: object
      description: Model release, used to deploy a model from one environment to another
      properties:
        from:
          type: string
          description: Origin environment from which the model is released
        to:
          type: string
          description: Destination environment to which the model is released
    ModelWithDeployments:
      type: object
      description: Logical object representing a model but with deployment definition
        inside
      allOf:
      - $ref: '#/components/schemas/Model'
      - properties:
          deployments:
            $ref: '#/components/schemas/ModelDeployments'
            description: Model deployments
    PendingInvitation:
      type: object
      description: Pending invitation in workspace
      allOf:
      - $ref: '#/components/schemas/StandardFieldsDynamoDb'
      - properties:
          email:
            type: string
            description: User email
          invited_by:
            type: string
            description: User sub
          role:
            type: string
            description: ACL role
          workspace:
            type: string
            description: Workspace name
    PendingInvitationAccept:
      type: object
      description: Pending invitation accept
      properties:
        email:
          type: string
          description: User email
        workspace:
          $ref: '#/components/schemas/Workspace'
    PendingInvitationRender:
      type: object
      description: Pending invitation in workspace
      properties:
        email:
          type: string
          description: User email
        invited_at:
          type: string
          description: Invitation date
        invited_by:
          $ref: '#/components/schemas/PendingInvitationRenderInvitedBy'
        role:
          type: string
          description: ACL role
        user_number:
          type: number
          description: Number of users in the workspace
        workspace:
          $ref: '#/components/schemas/PendingInvitationRenderWorkspace'
    PendingInvitationRenderInvitedBy:
      type: object
      description: Invited by
      properties:
        email:
          type: string
          description: User email
        family_name:
          type: string
          description: User family name
        given_name:
          type: string
          description: User given name
        sub:
          type: string
          description: User sub
    PendingInvitationRenderWorkspace:
      type: object
      description: Workspace
      properties:
        display_name:
          type: string
          description: Workspace display name
        name:
          type: string
          description: Workspace name
    Policy:
      type: object
      description: Rule that controls how a deployment is made and served (e.g. location
        restrictions)
      allOf:
      - $ref: '#/components/schemas/StandardFieldsDynamoDb'
      - properties:
          display_name:
            type: string
            description: Policy display name
          flavors:
            $ref: '#/components/schemas/Flavors'
            description: Flavors allowed by the policy. If not set, all flavors are
              allowed.
          labels:
            $ref: '#/components/schemas/Labels'
          locations:
            $ref: '#/components/schemas/PolicyLocations'
            description: Locations allowed by the policy. If not set, all locations
              are allowed.
          name:
            type: string
            description: Policy name
          resource_types:
            $ref: '#/components/schemas/PolicyResourceTypes'
            description: ResourceTypes where the policy is applied. If not set, the
              policy is applied to all resource types.
          type:
            type: string
            description: Policy type, can be location or flavor
          workspace:
            type: string
            description: The workspace the policy belongs to
    PolicyGpu:
      description: Policy GPU
      items:
        description: GPU name
        type: string
      type: array
    PolicyLocation:
      type: object
      description: Policy location
      properties:
        name:
          type: string
          description: Policy location name
        type:
          type: string
          description: Policy location type
    PolicyLocations:
      type: array
      description: PolicyLocations is a local type that wraps a slice of Location
      items:
        $ref: '#/components/schemas/PolicyLocation'
    PolicyResourceType:
      type: string
      description: PolicyResourceType is a type of resource, e.g. model, function,
        etc.
    PolicyResourceTypes:
      type: array
      description: PolicyResourceTypes is a local type that wraps a slice of PolicyResourceType
      items:
        $ref: '#/components/schemas/PolicyResourceType'
    ProviderConfig:
      type: object
      description: Model provider config
      properties:
        access_token:
          type: string
          description: The access token to use for the provider
        filename:
          type: string
          description: The file name to use for the model
        presigned_url:
          type: array
          description: The presigned URLs to upload the model to
          items: {}
        runtime:
          $ref: '#/components/schemas/Runtime'
    QPS:
      type: object
      description: Query per second per element, can be per response status code (e.g.
        200, 400) or per location
      properties:
        region_code:
          type: number
          description: QPS for location
    ResourceDeploymentLog:
      type: object
      description: Log for a resource deployment (eg. model deployment, function deployment)
      properties:
        message:
          type: string
          description: Content of the log
        timestamp:
          type: string
          description: The timestamp of the log
    ResourceDeploymentMetrics:
      type: object
      description: Metrics for a single resource deployment (eg. model deployment,
        function deployment)
      properties:
        inference_per_second_global:
          $ref: '#/components/schemas/ArrayMetric'
          description: Historical requests per second (RPS), for the model deployment
            globally
        inference_per_second_per_region:
          type: object
          description: Historical requests per second (RPS) per location, for the
            model deployment
          properties:
            region:
              $ref: '#/components/schemas/ArrayMetric'
        query_per_second_global:
          type: number
          description: RPS value (in last 24 hours) for the model deployment globally
        query_per_second_per_code_global:
          $ref: '#/components/schemas/QPS'
          description: RPS value (in last 24 hours) per response status code, for
            the model deployment globally
        query_per_second_per_region:
          $ref: '#/components/schemas/QPS'
          description: RPS value (in last 24 hours) per location, for the model deployment
        query_per_second_per_region_per_code:
          type: object
          description: RPS value (in last 24 hours) per response status code per location,
            for the model deployment
          properties:
            region:
              $ref: '#/components/schemas/QPS'
    ResourceMetrics:
      type: object
      description: Metrics for a single resource (eg. model, function)
      properties:
        inference_per_second_global:
          $ref: '#/components/schemas/ArrayMetric'
          description: Historical requests per second (RPS), for the model globally
        query_per_second_per_region:
          $ref: '#/components/schemas/QPS'
          description: RPS value (in last 24 hours) per location, for the model
    Runtime:
      type: object
      description: Set of configurations for a deployment
      properties:
        args:
          type: array
          description: The arguments to pass to the deployment runtime
          items: {}
        command:
          type: array
          description: The command to run the deployment
          items: {}
        envs:
          type: array
          description: The environment variables to set in the deployment. Should
            be a list of Kubernetes EnvVar types
          items: {}
        image:
          type: string
          description: The Docker image for the deployment
        model:
          type: string
          description: The slug name of the origin model. Only used if the deployment
            is a ModelDeployment
        readiness_probe:
          type: object
          description: The readiness probe. Should be a Kubernetes Probe type
        resources:
          type: object
          description: The resources for the deployment. Should be a Kubernetes ResourceRequirements
            type
        type:
          type: string
          description: The type of origin for the deployment
    ServerlessConfig:
      description: Configuration for the serverless model deployment
      properties:
        last_pod_retention_period:
          description: The last pod retention period
          type: string
        max_num_replicas:
          description: The maximum number of replicas
          type: integer
        metric:
          description: Metric to scale on, can be "cpu" or "memory" or "rps" or "concurrency"
          type: string
        min_num_replicas:
          description: The minimum number of replicas
          type: integer
        scale_down_delay:
          description: The scale down delay
          type: string
        scale_up_minimum:
          description: The scale up minimum
          type: integer
        stable_window:
          description: The stable window
          type: string
        target:
          description: Target value for the metric
          type: string
      type: object
    StandardFieldsDynamoDb:
      type: object
      description: Standard fields for Persistance
      properties:
        created_at:
          type: string
          description: The date and time when the resource was created
        updated_at:
          type: string
          description: The date and time when the resource was updated
    StoreAgent:
      type: object
      description: Store agent
      allOf:
      - $ref: '#/components/schemas/StandardFieldsDynamoDb'
      - properties:
          configuration:
            type: array
            description: Store agent configuration
            items:
              $ref: '#/components/schemas/StoreConfiguration'
          description:
            type: string
            description: Store agent description
          display_name:
            type: string
            description: Store agent display name
          image:
            type: string
            description: Store agent image
          labels:
            type: object
            description: Store agent labels
          name:
            type: string
            description: Store agent name
    StoreAgentConfiguration:
      description: Store agent configuration used to configure your agent directly
        from beamlit interface
      properties:
        description:
          description: Store function configuration description
          type: string
        if:
          description: 'Conditional rendering for the configuration, example: provider
            === ''openai'''
          type: string
        name:
          description: Store function configuration name
          type: string
        required:
          description: Store function configuration required
          type: boolean
        secret:
          description: Store function configuration secret
          type: boolean
      type: object
    StoreConfiguration:
      type: object
      description: 'Store configuration for resources (eg: agent, function, etc)'
      properties:
        description:
          type: string
          description: Store configuration description
        display_name:
          type: string
          description: Store configuration display name
        if:
          type: string
          description: 'Conditional rendering for the configuration, example: provider
            === ''openai'''
        name:
          type: string
          description: Store configuration name
        options:
          type: array
          items:
            $ref: '#/components/schemas/StoreConfigurationOption'
        required:
          type: boolean
          description: Store configuration required
        secret:
          type: boolean
          description: Store configuration secret
        type:
          type: string
          description: Store configuration type
    StoreConfigurationOption:
      type: object
      description: Store configuration options for a select type configuration
      properties:
        if:
          type: string
          description: 'Conditional rendering for the configuration option, example:
            provider === ''openai'''
        label:
          type: string
          description: Store configuration option label
        value:
          type: string
          description: Store configuration option value
    StoreFunction:
      type: object
      description: Store function
      allOf:
      - $ref: '#/components/schemas/StandardFieldsDynamoDb'
      - properties:
          configuration:
            type: array
            description: Store function configuration
            items:
              $ref: '#/components/schemas/StoreConfiguration'
          description:
            type: string
            description: Store function description
          display_name:
            type: string
            description: Store function display name
          image:
            type: string
            description: Store function image
          labels:
            type: object
            description: Store function labels
          name:
            type: string
            description: Store function name
          parameters:
            type: array
            description: Store function parameters
            items:
              $ref: '#/components/schemas/StoreFunctionParameter'
    StoreFunctionConfiguration:
      description: Store function configuration used to configure your function directly
        from beamlit interface
      properties:
        description:
          description: Store function configuration description
          type: string
        if:
          description: 'Conditional rendering for the configuration, example: provider
            === ''openai'''
          type: string
        name:
          description: Store function configuration name
          type: string
        required:
          description: Store function configuration required
          type: boolean
        secret:
          description: Store function configuration secret
          type: boolean
      type: object
    StoreFunctionParameter:
      type: object
      description: Store function parameter
      properties:
        description:
          type: string
          description: Store function parameter description
        name:
          type: string
          description: Store function parameter name
        required:
          type: boolean
          description: Store function parameter required
        type:
          type: string
          description: Store function parameter type
    Workspace:
      type: object
      description: Workspace
      allOf:
      - $ref: '#/components/schemas/StandardFieldsDynamoDb'
      - properties:
          display_name:
            type: string
            description: Workspace display name
          labels:
            type: object
            description: Workspace labels
          name:
            type: string
            description: Workspace name
    WorkspaceUser:
      type: object
      description: Workspace user
      properties:
        accepted:
          type: boolean
          description: Whether the user has accepted the workspace invitation
        email:
          type: string
          description: Workspace user email
        email_verified:
          type: boolean
          description: Whether the user's email has been verified
        family_name:
          type: string
          description: Workspace user family name
        given_name:
          type: string
          description: Workspace user given name
        role:
          type: string
          description: Workspace user role
        sub:
          type: string
          description: Workspace user identifier
  securitySchemes:
    BearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
info:
  title: Beamlit Control Plane
  version: 0.0.1
openapi: 3.0.3
paths:
  /agents:
    get:
      operationId: ListAgents
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Agent'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - agents:list
      summary: List all agents
      tags:
      - agents
  /agents/{agentName}:
    delete:
      operationId: DeleteAgent
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: successful operation
      security:
      - BearerAuth:
        - agents:delete
      summary: Delete agent by name
      tags:
      - agents
    get:
      operationId: GetAgent
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: successful operation
      security:
      - BearerAuth:
        - agents:get
      summary: Get agent by name
      tags:
      - agents
    parameters:
    - description: Name of the agent
      in: path
      name: agentName
      required: true
      schema:
        type: string
    put:
      operationId: PutAgent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agent'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: successful operation
      security:
      - BearerAuth:
        - agents:update
      summary: Update agent by name
      tags:
      - agents
  /agents/{agentName}/deployments:
    get:
      operationId: ListAgentDeployments
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AgentDeployment'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - agent_deployments:list
      summary: List all agent deployments
      tags:
      - agents
    parameters:
    - description: Name of the agent
      in: path
      name: agentName
      required: true
      schema:
        type: string
  /agents/{agentName}/deployments/{environmentName}:
    delete:
      operationId: DeleteAgentDeployment
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentDeployment'
          description: successful operation
      security:
      - BearerAuth:
        - agent_deployments:delete
      summary: Delete agent deployment by environment name
      tags:
      - agents
    get:
      operationId: GetAgentDeployment
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentDeployment'
          description: successful operation
      security:
      - BearerAuth:
        - agent_deployments:get
      summary: Get agent deployment by environment name
      tags:
      - agents
    parameters:
    - description: Name of the agent
      in: path
      name: agentName
      required: true
      schema:
        type: string
    - description: Name of the environment
      in: path
      name: environmentName
      required: true
      schema:
        type: string
    put:
      operationId: PutAgentDeployment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentDeployment'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentDeployment'
          description: successful operation
      security:
      - BearerAuth:
        - agent_deployments:create
        - agent_deployments:update
      summary: Create or update agent deployment by environment name
      tags:
      - agents
  /agents/{agentName}/deployments/{environmentName}/logs:
    get:
      operationId: GetAgentDeploymentLogs
      parameters:
      - description: Name of the agent
        in: path
        name: agentName
        required: true
        schema:
          type: string
      - description: Name of the environment
        in: path
        name: environmentName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ResourceDeploymentLog'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - agent_deployments_logs:read
      tags:
      - agents
  /agents/{agentName}/deployments/{environmentName}/metrics:
    get:
      operationId: GetAgentDeploymentMetrics
      parameters:
      - description: Name of the agent
        in: path
        name: agentName
        required: true
        schema:
          type: string
      - description: Name of the environment
        in: path
        name: environmentName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceDeploymentMetrics'
          description: successful operation
      security:
      - BearerAuth:
        - agent_deployments_metrics:read
      tags:
      - agents
  /agents/{agentName}/metrics:
    get:
      operationId: GetAgentMetrics
      parameters:
      - description: Name of the agent
        in: path
        name: agentName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceMetrics'
          description: successful operation
      security:
      - BearerAuth:
        - agent_metrics:read
      summary: Get agent metrics
      tags:
      - agents
  /agents/{agentName}/release:
    parameters:
    - description: Name of the agent
      in: path
      name: agentName
      required: true
      schema:
        type: string
    post:
      operationId: CreateAgentRelease
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentRelease'
          description: successful operation
      security:
      - BearerAuth:
        - agent_releases:create
      summary: Create release for a agent from an environment
      tags:
      - agent_releases
  /authentication_providers/{authenticationProviderName}/models:
    get:
      description: Returns a list of all models for an integration by ID.
      operationId: ListModelsForAuthenticationProvider
      parameters:
      - description: Name of the authentication provider
        in: path
        name: authenticationProviderName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AuthenticationProviderModel'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - authentication_providers:list
      summary: List models for a authentication provider
      tags:
      - authentication_providers
  /authentication_providers/{authenticationProviderName}/models/{modelRepoId}/{modelId}:
    get:
      description: Returns a model with a repository for an integration by ID.
      operationId: GetModelWithRepoForAuthenticationProvider
      parameters:
      - description: Name of the authentication provider
        in: path
        name: authenticationProviderName
        required: true
        schema:
          type: string
      - description: Type of the model
        in: path
        name: modelRepoId
        required: true
        schema:
          type: string
      - description: ID of the model
        in: path
        name: modelId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationProviderModel'
          description: successful operation
      security:
      - BearerAuth:
        - authentication_providers:list
      summary: Get model for a authentication provider
      tags:
      - authentication_providers
  /authentication_providers/{authenticationProviderName}/organizations:
    get:
      description: Returns a list of all organizations for an integration by ID.
      operationId: ListOrganizationsForAuthenticationProvider
      parameters:
      - description: Name of the authentication provider
        in: path
        name: authenticationProviderName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AuthenticationProviderOrganization'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - authentication_providers:list
      summary: List organizations for an authentication provider
      tags:
      - authentication_providers
  /configuration:
    get:
      operationId: GetConfiguration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
          description: Configuration of the control plane
      security:
      - BearerAuth:
        - configurations:list
      summary: List all configurations
      tags:
      - configurations
  /environments:
    get:
      description: Returns a list of all environments in the workspace.
      operationId: ListEnvironments
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Environment'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - environments:list
      summary: List environments
      tags:
      - environments
  /environments/{environmentName}:
    delete:
      description: Deletes an environment by name.
      operationId: DeleteEnvironment
      parameters:
      - description: Name of the environment
        in: path
        name: environmentName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
          description: successful operation
      security:
      - BearerAuth:
        - environments:delete
      summary: Delete environment
      tags:
      - environments
    get:
      description: Returns an environment by name.
      operationId: GetEnvironment
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
          description: successful operation
      security:
      - BearerAuth:
        - environments:get
      summary: Get environment
      tags:
      - environments
    parameters:
    - description: Name of the environment
      in: path
      name: environmentName
      required: true
      schema:
        type: string
    put:
      description: Creates or updates an environment by name.
      operationId: PutEnvironment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Environment'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
          description: successful operation
      security:
      - BearerAuth:
        - environments:update
      summary: Create or Update environment
      tags:
      - environments
  /environments/{environmentName}/metrics:
    get:
      description: Returns metrics for an environment by name.
      operationId: GetEnvironmentMetrics
      parameters:
      - description: Name of the environment
        in: path
        name: environmentName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentMetrics'
          description: successful operation
      security:
      - BearerAuth:
        - environments_metrics:get
      summary: Get environment metrics
      tags:
      - environments
  /functions:
    get:
      operationId: ListFunctions
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Function'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - functions:list
      summary: List all functions
      tags:
      - functions
  /functions/{functionName}:
    delete:
      operationId: DeleteFunction
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Function'
          description: successful operation
      security:
      - BearerAuth:
        - functions:delete
      summary: Delete function by name
      tags:
      - functions
    get:
      operationId: GetFunction
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Function'
          description: successful operation
      security:
      - BearerAuth:
        - functions:get
      summary: Get function by name
      tags:
      - functions
    parameters:
    - description: Name of the function
      in: path
      name: functionName
      required: true
      schema:
        type: string
    put:
      operationId: PutFunction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Function'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Function'
          description: successful operation
      security:
      - BearerAuth:
        - functions:update
      summary: Update function by name
      tags:
      - functions
  /functions/{functionName}/deployments:
    get:
      operationId: ListFunctionDeployments
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/FunctionDeployment'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - function_deployments:list
      summary: List all function deployments
      tags:
      - functions
    parameters:
    - description: Name of the function
      in: path
      name: functionName
      required: true
      schema:
        type: string
  /functions/{functionName}/deployments/{environmentName}:
    delete:
      operationId: DeleteFunctionDeployment
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionDeployment'
          description: successful operation
      security:
      - BearerAuth:
        - function_deployments:delete
      summary: Delete function deployment by environment name
      tags:
      - functions
    get:
      operationId: GetFunctionDeployment
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionDeployment'
          description: successful operation
      security:
      - BearerAuth:
        - function_deployments:get
      summary: Get function deployment by environment name
      tags:
      - functions
    parameters:
    - description: Name of the function
      in: path
      name: functionName
      required: true
      schema:
        type: string
    - description: Name of the environment
      in: path
      name: environmentName
      required: true
      schema:
        type: string
    put:
      operationId: PutFunctionDeployment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FunctionDeployment'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionDeployment'
          description: successful operation
      security:
      - BearerAuth:
        - function_deployments:create
        - function_deployments:update
      summary: Create or update function deployment by environment name
      tags:
      - functions
  /functions/{functionName}/deployments/{environmentName}/logs:
    get:
      operationId: GetFunctionDeploymentLogs
      parameters:
      - description: Name of the function
        in: path
        name: functionName
        required: true
        schema:
          type: string
      - description: Name of the environment
        in: path
        name: environmentName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ResourceDeploymentLog'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - function_deployments_logs:read
      tags:
      - functions
  /functions/{functionName}/deployments/{environmentName}/metrics:
    get:
      operationId: GetFunctionDeploymentMetrics
      parameters:
      - description: Name of the function
        in: path
        name: functionName
        required: true
        schema:
          type: string
      - description: Name of the environment
        in: path
        name: environmentName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceDeploymentMetrics'
          description: successful operation
      security:
      - BearerAuth:
        - function_deployments_metrics:read
      tags:
      - functions
  /functions/{functionName}/metrics:
    get:
      operationId: GetFunctionMetrics
      parameters:
      - description: Name of the function
        in: path
        name: functionName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceMetrics'
          description: successful operation
      security:
      - BearerAuth:
        - function_metrics:read
      summary: Get function metrics
      tags:
      - functions
  /functions/{functionName}/release:
    parameters:
    - description: Name of the function
      in: path
      name: functionName
      required: true
      schema:
        type: string
    post:
      operationId: CreateFunctionRelease
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionRelease'
          description: successful operation
      security:
      - BearerAuth:
        - function_releases:create
      summary: Create release for a function from an environment
      tags:
      - function_releases
  /locations:
    get:
      description: Returns a list of all locations available with status.
      operationId: ListLocations
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Location'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - locations:list
      summary: List locations
      tags:
      - locations
  /metrics:
    get:
      description: Returns metrics for the workspace's deployments.
      operationId: GetMetrics
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metrics'
          description: successful operation
      security:
      - BearerAuth:
        - metrics:get
      summary: Get metrics for a workspace
      tags:
      - metrics
  /model_providers:
    get:
      description: Returns a list of all integrations in the workspace.
      operationId: ListModelProviders
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ModelProvider'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - model_providers:list
      summary: List model providers
      tags:
      - model_providers
  /model_providers/{modelProviderName}:
    delete:
      description: Deletes an integration by ID.
      operationId: DeleteModelProvider
      parameters:
      - description: Name of the model provider
        in: path
        name: modelProviderName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelProvider'
          description: successful operation
      security:
      - BearerAuth:
        - model_providers:delete
      summary: Delete model provider
      tags:
      - model_providers
    get:
      description: Returns an integration by ID.
      operationId: GetModelProvider
      parameters:
      - description: Name of the model provider
        in: path
        name: modelProviderName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelProvider'
          description: successful operation
      security:
      - BearerAuth:
        - model_providers:get
      summary: Get model provider
      tags:
      - model_providers
    put:
      description: Creates or updates an integration by ID.
      operationId: PutModelProvider
      parameters:
      - description: Name of the model provider
        in: path
        name: modelProviderName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelProvider'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelProvider'
          description: successful operation
      security:
      - BearerAuth:
        - model_providers:create
        - model_providers:update
      summary: Create or Update model provider
      tags:
      - model_providers
  /models:
    get:
      description: Returns a list of all models in the workspace.
      operationId: ListModels
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Model'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - models:list
      summary: List models
      tags:
      - models
  /models/{modelName}:
    delete:
      description: Deletes a model by name.
      operationId: DeleteModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: successful operation
      security:
      - BearerAuth:
        - models:delete
      summary: Delete model
      tags:
      - models
    get:
      description: Returns a model by name.
      operationId: GetModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: successful operation
      security:
      - BearerAuth:
        - models:get
      summary: Get model
      tags:
      - models
    parameters:
    - description: Name of the model
      in: path
      name: modelName
      required: true
      schema:
        type: string
    put:
      description: Creates or updates a model by name.
      operationId: PutModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelWithDeployments'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: successful operation
      security:
      - BearerAuth:
        - models:update
      summary: Create or update model
      tags:
      - models
  /models/{modelName}/deployments:
    get:
      description: Returns a list of all deployments for a model.
      operationId: ListModelDeployments
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ModelDeployment'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - model_deployments:list
      summary: List model deployments
      tags:
      - models
    parameters:
    - description: Name of the model
      in: path
      name: modelName
      required: true
      schema:
        type: string
  /models/{modelName}/deployments/{environmentName}:
    delete:
      description: Deletes a deployment for a model by name.
      operationId: DeleteModelDeployment
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelDeployment'
          description: successful operation
      security:
      - BearerAuth:
        - model_deployments:delete
      summary: Delete model deployment
      tags:
      - models
    get:
      description: Returns a deployment for a model by name.
      operationId: GetModelDeployment
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelDeployment'
          description: successful operation
      security:
      - BearerAuth:
        - model_deployments:get
      summary: Get model deployment
      tags:
      - models
    parameters:
    - description: Name of the model
      in: path
      name: modelName
      required: true
      schema:
        type: string
    - description: Name of the environment
      in: path
      name: environmentName
      required: true
      schema:
        type: string
    put:
      description: Creates or updates a deployment for a model by name.
      operationId: PutModelDeployment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelDeployment'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelDeployment'
          description: successful operation
      security:
      - BearerAuth:
        - model_deployments:create
        - model_deployments:update
      summary: Create or update model deployment
      tags:
      - models
  /models/{modelName}/deployments/{environmentName}/logs:
    get:
      description: Returns logs for a model deployment by name.
      operationId: GetModelDeploymentLogs
      parameters:
      - description: Name of the model
        in: path
        name: modelName
        required: true
        schema:
          type: string
      - description: Name of the environment
        in: path
        name: environmentName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ModelDeploymentLog'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - model_deployments_logs:read
      tags:
      - models
  /models/{modelName}/deployments/{environmentName}/metrics:
    get:
      description: Returns metrics for a model deployment by name.
      operationId: GetModelDeploymentMetrics
      parameters:
      - description: Name of the model
        in: path
        name: modelName
        required: true
        schema:
          type: string
      - description: Name of the environment
        in: path
        name: environmentName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelDeploymentMetrics'
          description: successful operation
      security:
      - BearerAuth:
        - model_deployments_metrics:read
      tags:
      - models
  /models/{modelName}/metrics:
    get:
      description: Returns metrics for a model by name.
      operationId: GetModelMetrics
      parameters:
      - description: Name of the model
        in: path
        name: modelName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelMetrics'
          description: successful operation
      security:
      - BearerAuth:
        - model_metrics:read
      summary: Get model metrics
      tags:
      - models
  /models/{modelName}/release:
    parameters:
    - description: Name of the model
      in: path
      name: modelName
      required: true
      schema:
        type: string
    post:
      description: Make a release for a model from an environment to another.
      operationId: ReleaseModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelRelease'
          description: successful operation
      security:
      - BearerAuth:
        - model_releases:create
      summary: Release model from an environment
      tags:
      - model_releases
  /policies:
    get:
      description: Returns a list of all policies in the workspace.
      operationId: ListPolicies
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Policy'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - policies:list
      summary: List policies
      tags:
      - policies
  /policies/{policyName}:
    delete:
      description: Deletes a policy by name.
      operationId: DeletePolicy
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
          description: successful operation
      security:
      - BearerAuth:
        - policies:delete
      summary: Delete policy
      tags:
      - policies
    get:
      description: Returns a policy by name.
      operationId: GetPolicy
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
          description: successful operation
      security:
      - BearerAuth:
        - policies:get
      summary: Get policy
      tags:
      - policies
    parameters:
    - description: Name of the policy
      in: path
      name: policyName
      required: true
      schema:
        type: string
    put:
      description: Creates or updates a policy by name.
      operationId: PutPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
          description: successful operation
      security:
      - BearerAuth:
        - policies:update
      summary: Create or update policy
      tags:
      - policies
  /profile/invitations:
    get:
      description: Returns a list of all pending invitations in the workspace.
      operationId: ListAllPendingInvitations
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PendingInvitationRender'
                type: array
          description: successful operation
        "404":
          description: no pending invitations
      security:
      - BearerAuth:
        - invitations:list
      summary: List pending invitations
      tags:
      - invitations
  /service_accounts:
    get:
      description: Returns a list of all service accounts in the workspace.
      operationId: GetWorkspaceServiceAccounts
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    client_id:
                      description: Service account client ID
                      type: string
                    created_at:
                      description: Creation timestamp
                      type: string
                    description:
                      description: Service account description
                      type: string
                    name:
                      description: Service account name
                      type: string
                    updated_at:
                      description: Last update timestamp
                      type: string
                  type: object
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - workspaces:get
      summary: Get workspace service accounts
      tags:
      - workspaces
    post:
      description: Creates a service account in the workspace.
      operationId: CreateWorkspaceServiceAccount
      requestBody:
        content:
          application/json:
            schema:
              properties:
                description:
                  description: Service account description
                  type: string
                name:
                  description: Service account name
                  type: string
              required:
              - name
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  client_id:
                    description: Service account client ID
                    type: string
                  client_secret:
                    description: Service account client secret (only returned on creation)
                    type: string
                  created_at:
                    description: Creation timestamp
                    type: string
                  description:
                    description: Service account description
                    type: string
                  name:
                    description: Service account name
                    type: string
                  updated_at:
                    description: Last update timestamp
                    type: string
                type: object
          description: successful operation
      security:
      - BearerAuth:
        - workspaces:update
      summary: Create workspace service account
      tags:
      - workspaces
  /service_accounts/{clientId}:
    delete:
      description: Deletes a service account.
      operationId: DeleteWorkspaceServiceAccount
      parameters:
      - description: Client ID
        in: path
        name: clientId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  client_id:
                    description: Service account client ID
                    type: string
                  created_at:
                    description: Creation timestamp
                    type: string
                  description:
                    description: Service account description
                    type: string
                  name:
                    description: Service account name
                    type: string
                  updated_at:
                    description: Last update timestamp
                    type: string
                type: object
          description: successful operation
      security:
      - BearerAuth:
        - workspaces:update
      summary: Delete workspace service account
      tags:
      - workspaces
    put:
      description: Updates a service account.
      operationId: UpdateWorkspaceServiceAccount
      parameters:
      - description: Client ID
        in: path
        name: clientId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                description:
                  description: Service account description
                  type: string
                name:
                  description: Service account name
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  client_id:
                    description: Service account client ID
                    type: string
                  created_at:
                    description: Creation timestamp
                    type: string
                  description:
                    description: Service account description
                    type: string
                  name:
                    description: Service account name
                    type: string
                  updated_at:
                    description: Last update timestamp
                    type: string
                type: object
          description: successful operation
      security:
      - BearerAuth:
        - workspaces:update
      summary: Update workspace service account
      tags:
      - workspaces
  /service_accounts/{clientId}/api_keys:
    get:
      description: Returns a list of all API keys for a service account.
      operationId: ListApiKeysForServiceAccount
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiKey'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - api_key:list
      summary: List API keys for service account
      tags:
      - workspaces
    parameters:
    - description: Client ID
      in: path
      name: clientId
      required: true
      schema:
        type: string
    post:
      description: Creates an API key for a service account.
      operationId: CreateApiKeyForServiceAccount
      requestBody:
        content:
          application/json:
            schema:
              properties:
                expires_in:
                  description: Expiration period for the API key
                  type: string
                name:
                  description: Name for the API key
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: successful operation
      security:
      - BearerAuth:
        - api_key:write
      summary: Create API key for service account
      tags:
      - workspaces
  /service_accounts/{clientId}/api_keys/{apiKeyId}:
    delete:
      description: Deletes an API key for a service account.
      operationId: DeleteApiKeyForServiceAccount
      responses:
        "200":
          description: successful operation
      security:
      - BearerAuth:
        - api_key:write
      summary: Delete API key for service account
      tags:
      - workspaces
    parameters:
    - description: Client ID
      in: path
      name: clientId
      required: true
      schema:
        type: string
    - description: Api key id
      in: path
      name: apiKeyId
      required: true
      schema:
        type: string
  /store/agents:
    get:
      operationId: ListStoreAgents
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/StoreAgent'
                type: array
          description: successful operation
      summary: List all store agent
      tags:
      - store
  /store/agents/{agentName}:
    get:
      operationId: GetStoreAgent
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreAgent'
          description: successful operation
      summary: Get store agent by name
      tags:
      - store
    parameters:
    - description: Name of the agent
      in: path
      name: agentName
      required: true
      schema:
        type: string
  /store/functions:
    get:
      operationId: ListStoreFunctions
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/StoreFunction'
                type: array
          description: successful operation
      summary: List all store agent functions
      tags:
      - store
  /store/functions/{functionName}:
    get:
      operationId: GetStoreFunction
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreFunction'
          description: successful operation
      summary: Get store agent function by name
      tags:
      - store
    parameters:
    - description: Name of the function
      in: path
      name: functionName
      required: true
      schema:
        type: string
  /users:
    get:
      description: Returns a list of all users in the workspace.
      operationId: ListWorkspaceUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WorkspaceUser'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - workspaces:list
      summary: List users in workspace
      tags:
      - workspaces
    post:
      description: Invites a user to the workspace by email.
      operationId: InviteWorkspaceUser
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  format: email
                  type: string
              type: object
        description: Email of the user to invite
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingInvitation'
          description: successful operation
        "400":
          description: invalid email format
        "404":
          description: workspace not found
      security:
      - BearerAuth:
        - workspaces:invite
      summary: Invite user to workspace
      tags:
      - workspaces
  /users/{subOrEmail}:
    delete:
      description: Removes a user from the workspace (or revokes an invitation if
        the user has not accepted the invitation yet).
      operationId: RemoveWorkspaceUser
      parameters:
      - description: Sub or email of the user
        in: path
        name: subOrEmail
        required: true
        schema:
          type: string
      responses:
        "200":
          description: User successfully removed or invitation revoked
        "404":
          description: Workspace or user not found
      security:
      - BearerAuth:
        - workspaces:remove
      summary: Remove user from workspace or revoke invitation
      tags:
      - workspaces
    put:
      description: Updates the role of a user in the workspace.
      operationId: UpdateWorkspaceUserRole
      parameters:
      - description: Sub or email of the user
        in: path
        name: subOrEmail
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                role:
                  description: The new role to assign to the user
                  type: string
              required:
              - role
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceUser'
          description: User role updated successfully
        "400":
          description: Invalid role provided
        "404":
          description: Workspace or user not found
      security:
      - BearerAuth:
        - workspaces:update
      summary: Update user role in workspace
      tags:
      - workspaces
  /workspaces:
    get:
      description: Returns a list of all workspaces.
      operationId: ListWorkspaces
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Workspace'
                type: array
          description: successful operation
      security:
      - BearerAuth:
        - workspaces:list
      summary: List workspaces
      tags:
      - workspaces
    post:
      description: Creates a workspace.
      operationId: CreateWorspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: successful operation
      security:
      - BearerAuth:
        - workspaces:create
      summary: Create worspace
      tags:
      - workspaces
  /workspaces/{workspaceName}:
    delete:
      description: Deletes a workspace by name.
      operationId: DeleteWorkspace
      parameters:
      - description: Name of the workspace
        in: path
        name: workspaceName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: successful operation
      security:
      - BearerAuth:
        - workspaces:delete
      summary: Delete workspace
      tags:
      - workspaces
    get:
      description: Returns a workspace by name.
      operationId: GetWorkspace
      parameters:
      - description: Name of the workspace
        in: path
        name: workspaceName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: successful operation
      security:
      - BearerAuth:
        - workspaces:get
      summary: Get workspace
      tags:
      - workspaces
    put:
      description: Updates a workspace by name.
      operationId: UpdateWorkspace
      parameters:
      - description: name of the workspace
        in: path
        name: workspaceName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: successful operation
      security:
      - BearerAuth:
        - workspaces:update
      summary: Update workspace
      tags:
      - workspaces
  /workspaces/{workspaceName}/decline:
    post:
      description: Declines an invitation to a workspace.
      operationId: DeclineWorkspaceInvitation
      parameters:
      - description: Name of the workspace
        in: path
        name: workspaceName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingInvitation'
          description: Invitation successfully declined
      security:
      - BearerAuth:
        - workspaces:decline
      summary: Decline invitation to workspace
      tags:
      - workspaces
  /workspaces/{workspaceName}/join:
    post:
      description: Accepts an invitation to a workspace.
      operationId: AcceptWorkspaceInvitation
      parameters:
      - description: Name of the workspace
        in: path
        name: workspaceName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingInvitationAccept'
          description: Invitation successfully accepted
        "404":
          description: Workspace or invitation not found
      security:
      - BearerAuth:
        - workspaces:accept
      summary: Accept invitation to workspace
      tags:
      - workspaces
  /workspaces/{workspaceName}/leave:
    delete:
      description: Leaves a workspace.
      operationId: LeaveWorkspace
      parameters:
      - description: Name of the workspace
        in: path
        name: workspaceName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: Workspace successfully left
        "404":
          description: Workspace not found
      security:
      - BearerAuth:
        - workspaces:leave
      summary: Leave workspace
      tags:
      - workspaces
security:
- BearerAuth:
  - admin
servers:
- description: Beamlit dev control Plane
  url: https://api.beamlit.dev/v0
- description: Beamlit dev inference
  url: https://run.beamlit.dev
